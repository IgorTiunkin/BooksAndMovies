plugins {
    id 'java'
    id 'org.springframework.boot' version "$SPRING_BOOT_VERSION"
    id 'io.spring.dependency-management' version "$SPRING_DEPENDECY_MANAGEMENT_VERSION"
    id 'jacoco'
}

group = 'com.phantom'
version = '0.0.1-SNAPSHOT'


jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-cache"


    // https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter
    implementation "io.springfox:springfox-boot-starter:$SPRINGFOX_VERSION"

    implementation "org.flywaydb:flyway-core:$FLYWAY_VERSION"

    implementation "io.github.cdimascio:dotenv-java:$DOTENV_VERSION"

    runtimeOnly "org.postgresql:postgresql"

    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    implementation "org.mapstruct:mapstruct:$MAPSTRUCT_VERSION"
    annotationProcessor "org.mapstruct:mapstruct-processor:$MAPSTRUCT_VERSION"


    testImplementation "org.springframework.boot:spring-boot-starter-test"
    //testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "com.h2database:h2"

}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes "Main-Class": "com.phantom.booksandmovies.BooksandmoviesApplication"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

